//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/PlayerMovementBigActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerMovementBigActionMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerMovementBigActionMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerMovementBigActionMap"",
    ""maps"": [
        {
            ""name"": ""RegMove"",
            ""id"": ""b6325fd2-ca52-4890-a78d-83e00412efb3"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e4e3fcb4-53d7-4a6a-a37f-ac8b763c3914"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""dc1674e4-be1d-466c-94ba-62d951b477ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""5af39b19-3fc5-4f11-a097-90c14fab567b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f0245036-c990-4a1f-91f5-e88d65382a43"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d014e3b5-4947-46a9-97b9-55ea76130995"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a3928e9-ba6e-44ec-8517-851662b5e1a2"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BikeMove"",
            ""id"": ""b75671d3-199b-412e-b667-57011f94f87f"",
            ""actions"": [
                {
                    ""name"": ""MoveBike"",
                    ""type"": ""Value"",
                    ""id"": ""37bb8d18-7682-446d-b14e-89168901cb14"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JumpBike"",
                    ""type"": ""Button"",
                    ""id"": ""21fffe4d-448c-4587-b174-cdd543ff2cd7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpeedBike"",
                    ""type"": ""Value"",
                    ""id"": ""433522e0-51e8-4cbf-86e9-9f204c3bbf4d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Break"",
                    ""type"": ""Button"",
                    ""id"": ""a6ca5ad1-1d6e-4eac-809f-a306d667b4aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b392b462-efc7-4ea1-82c1-bcc002e04f86"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveBike"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6c349cc-6736-415c-8485-e0b8bbd264ff"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpBike"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c92cdc15-caec-4614-ba12-f5aa9ccff9eb"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpeedBike"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8789e4ef-4f64-4666-b119-4f288611dac5"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Break"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""JetpackMove"",
            ""id"": ""91916a28-680d-4d9b-a6b5-ed72521e7ef5"",
            ""actions"": [
                {
                    ""name"": ""Jetpackmove"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ac3fa0f0-d749-4ff6-bb2f-8f2fce2c3101"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JetPackRise"",
                    ""type"": ""Button"",
                    ""id"": ""7a80b5e2-9195-4f84-baf3-e989727d5428"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dd269cc5-68ca-44a7-9b39-d163df40478f"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jetpackmove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93e511da-445c-4031-802b-187033431175"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JetPackRise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Climbmove"",
            ""id"": ""7c37886d-6e37-4754-bfdb-e583bc0d6204"",
            ""actions"": [
                {
                    ""name"": ""MoveHandsAndArms"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8d4382e7-0b64-4c5d-84a4-78cf4d298ea6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightHand"",
                    ""type"": ""Button"",
                    ""id"": ""721b5064-3d4e-4e2d-b8e8-6ed1fefc6706"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftHand"",
                    ""type"": ""Button"",
                    ""id"": ""a2a858ff-1c98-4cb2-97ec-a26c6b0e925d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightFoot"",
                    ""type"": ""Button"",
                    ""id"": ""f4940311-2a75-4873-bd09-10bec62d8e16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftFoot"",
                    ""type"": ""Button"",
                    ""id"": ""1093f14f-5c65-411a-b029-e4d261fc36d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2170427d-54cf-41ad-a892-adfc88afa41f"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveHandsAndArms"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""648a25fa-a0a8-42a9-9e9a-a8b02fc02a13"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""229230f9-b834-442f-a617-05c6c9d49f35"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""533e3292-83ea-4971-b57b-3f4fc32fc214"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightFoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""34c13398-cb98-48b0-95f2-75d5150566aa"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftFoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interaction"",
            ""id"": ""f650d2de-0b10-44fe-b2d3-508155c367d2"",
            ""actions"": [
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""12c7771e-3a23-4205-a1fa-463562119b4d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Accept"",
                    ""type"": ""Button"",
                    ""id"": ""f468410f-e15d-4f9d-b5f3-9d28ff45fc3b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""c567cdf5-c46b-44a6-aa20-214e0ccf39a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchVheicle"",
                    ""type"": ""Button"",
                    ""id"": ""5a2612de-96ae-4ce6-b407-b10d429d81e1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ed276988-1db0-46fb-8f11-443e5fd14216"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91e719fd-2e47-4bc9-a8e9-a656f711785e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accept"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e82dfe1-e156-4691-a256-31fca58e81b4"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c9d11fd-b167-437d-8150-6615fcbf13de"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchVheicle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // RegMove
        m_RegMove = asset.FindActionMap("RegMove", throwIfNotFound: true);
        m_RegMove_Move = m_RegMove.FindAction("Move", throwIfNotFound: true);
        m_RegMove_Jump = m_RegMove.FindAction("Jump", throwIfNotFound: true);
        m_RegMove_Run = m_RegMove.FindAction("Run", throwIfNotFound: true);
        // BikeMove
        m_BikeMove = asset.FindActionMap("BikeMove", throwIfNotFound: true);
        m_BikeMove_MoveBike = m_BikeMove.FindAction("MoveBike", throwIfNotFound: true);
        m_BikeMove_JumpBike = m_BikeMove.FindAction("JumpBike", throwIfNotFound: true);
        m_BikeMove_SpeedBike = m_BikeMove.FindAction("SpeedBike", throwIfNotFound: true);
        m_BikeMove_Break = m_BikeMove.FindAction("Break", throwIfNotFound: true);
        // JetpackMove
        m_JetpackMove = asset.FindActionMap("JetpackMove", throwIfNotFound: true);
        m_JetpackMove_Jetpackmove = m_JetpackMove.FindAction("Jetpackmove", throwIfNotFound: true);
        m_JetpackMove_JetPackRise = m_JetpackMove.FindAction("JetPackRise", throwIfNotFound: true);
        // Climbmove
        m_Climbmove = asset.FindActionMap("Climbmove", throwIfNotFound: true);
        m_Climbmove_MoveHandsAndArms = m_Climbmove.FindAction("MoveHandsAndArms", throwIfNotFound: true);
        m_Climbmove_RightHand = m_Climbmove.FindAction("RightHand", throwIfNotFound: true);
        m_Climbmove_LeftHand = m_Climbmove.FindAction("LeftHand", throwIfNotFound: true);
        m_Climbmove_RightFoot = m_Climbmove.FindAction("RightFoot", throwIfNotFound: true);
        m_Climbmove_LeftFoot = m_Climbmove.FindAction("LeftFoot", throwIfNotFound: true);
        // Interaction
        m_Interaction = asset.FindActionMap("Interaction", throwIfNotFound: true);
        m_Interaction_Start = m_Interaction.FindAction("Start", throwIfNotFound: true);
        m_Interaction_Accept = m_Interaction.FindAction("Accept", throwIfNotFound: true);
        m_Interaction_Interact = m_Interaction.FindAction("Interact", throwIfNotFound: true);
        m_Interaction_SwitchVheicle = m_Interaction.FindAction("SwitchVheicle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // RegMove
    private readonly InputActionMap m_RegMove;
    private IRegMoveActions m_RegMoveActionsCallbackInterface;
    private readonly InputAction m_RegMove_Move;
    private readonly InputAction m_RegMove_Jump;
    private readonly InputAction m_RegMove_Run;
    public struct RegMoveActions
    {
        private @PlayerMovementBigActionMap m_Wrapper;
        public RegMoveActions(@PlayerMovementBigActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_RegMove_Move;
        public InputAction @Jump => m_Wrapper.m_RegMove_Jump;
        public InputAction @Run => m_Wrapper.m_RegMove_Run;
        public InputActionMap Get() { return m_Wrapper.m_RegMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RegMoveActions set) { return set.Get(); }
        public void SetCallbacks(IRegMoveActions instance)
        {
            if (m_Wrapper.m_RegMoveActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_RegMoveActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_RegMoveActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_RegMoveActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_RegMoveActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_RegMoveActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_RegMoveActionsCallbackInterface.OnJump;
                @Run.started -= m_Wrapper.m_RegMoveActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_RegMoveActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_RegMoveActionsCallbackInterface.OnRun;
            }
            m_Wrapper.m_RegMoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
            }
        }
    }
    public RegMoveActions @RegMove => new RegMoveActions(this);

    // BikeMove
    private readonly InputActionMap m_BikeMove;
    private IBikeMoveActions m_BikeMoveActionsCallbackInterface;
    private readonly InputAction m_BikeMove_MoveBike;
    private readonly InputAction m_BikeMove_JumpBike;
    private readonly InputAction m_BikeMove_SpeedBike;
    private readonly InputAction m_BikeMove_Break;
    public struct BikeMoveActions
    {
        private @PlayerMovementBigActionMap m_Wrapper;
        public BikeMoveActions(@PlayerMovementBigActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveBike => m_Wrapper.m_BikeMove_MoveBike;
        public InputAction @JumpBike => m_Wrapper.m_BikeMove_JumpBike;
        public InputAction @SpeedBike => m_Wrapper.m_BikeMove_SpeedBike;
        public InputAction @Break => m_Wrapper.m_BikeMove_Break;
        public InputActionMap Get() { return m_Wrapper.m_BikeMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BikeMoveActions set) { return set.Get(); }
        public void SetCallbacks(IBikeMoveActions instance)
        {
            if (m_Wrapper.m_BikeMoveActionsCallbackInterface != null)
            {
                @MoveBike.started -= m_Wrapper.m_BikeMoveActionsCallbackInterface.OnMoveBike;
                @MoveBike.performed -= m_Wrapper.m_BikeMoveActionsCallbackInterface.OnMoveBike;
                @MoveBike.canceled -= m_Wrapper.m_BikeMoveActionsCallbackInterface.OnMoveBike;
                @JumpBike.started -= m_Wrapper.m_BikeMoveActionsCallbackInterface.OnJumpBike;
                @JumpBike.performed -= m_Wrapper.m_BikeMoveActionsCallbackInterface.OnJumpBike;
                @JumpBike.canceled -= m_Wrapper.m_BikeMoveActionsCallbackInterface.OnJumpBike;
                @SpeedBike.started -= m_Wrapper.m_BikeMoveActionsCallbackInterface.OnSpeedBike;
                @SpeedBike.performed -= m_Wrapper.m_BikeMoveActionsCallbackInterface.OnSpeedBike;
                @SpeedBike.canceled -= m_Wrapper.m_BikeMoveActionsCallbackInterface.OnSpeedBike;
                @Break.started -= m_Wrapper.m_BikeMoveActionsCallbackInterface.OnBreak;
                @Break.performed -= m_Wrapper.m_BikeMoveActionsCallbackInterface.OnBreak;
                @Break.canceled -= m_Wrapper.m_BikeMoveActionsCallbackInterface.OnBreak;
            }
            m_Wrapper.m_BikeMoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveBike.started += instance.OnMoveBike;
                @MoveBike.performed += instance.OnMoveBike;
                @MoveBike.canceled += instance.OnMoveBike;
                @JumpBike.started += instance.OnJumpBike;
                @JumpBike.performed += instance.OnJumpBike;
                @JumpBike.canceled += instance.OnJumpBike;
                @SpeedBike.started += instance.OnSpeedBike;
                @SpeedBike.performed += instance.OnSpeedBike;
                @SpeedBike.canceled += instance.OnSpeedBike;
                @Break.started += instance.OnBreak;
                @Break.performed += instance.OnBreak;
                @Break.canceled += instance.OnBreak;
            }
        }
    }
    public BikeMoveActions @BikeMove => new BikeMoveActions(this);

    // JetpackMove
    private readonly InputActionMap m_JetpackMove;
    private IJetpackMoveActions m_JetpackMoveActionsCallbackInterface;
    private readonly InputAction m_JetpackMove_Jetpackmove;
    private readonly InputAction m_JetpackMove_JetPackRise;
    public struct JetpackMoveActions
    {
        private @PlayerMovementBigActionMap m_Wrapper;
        public JetpackMoveActions(@PlayerMovementBigActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jetpackmove => m_Wrapper.m_JetpackMove_Jetpackmove;
        public InputAction @JetPackRise => m_Wrapper.m_JetpackMove_JetPackRise;
        public InputActionMap Get() { return m_Wrapper.m_JetpackMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JetpackMoveActions set) { return set.Get(); }
        public void SetCallbacks(IJetpackMoveActions instance)
        {
            if (m_Wrapper.m_JetpackMoveActionsCallbackInterface != null)
            {
                @Jetpackmove.started -= m_Wrapper.m_JetpackMoveActionsCallbackInterface.OnJetpackmove;
                @Jetpackmove.performed -= m_Wrapper.m_JetpackMoveActionsCallbackInterface.OnJetpackmove;
                @Jetpackmove.canceled -= m_Wrapper.m_JetpackMoveActionsCallbackInterface.OnJetpackmove;
                @JetPackRise.started -= m_Wrapper.m_JetpackMoveActionsCallbackInterface.OnJetPackRise;
                @JetPackRise.performed -= m_Wrapper.m_JetpackMoveActionsCallbackInterface.OnJetPackRise;
                @JetPackRise.canceled -= m_Wrapper.m_JetpackMoveActionsCallbackInterface.OnJetPackRise;
            }
            m_Wrapper.m_JetpackMoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jetpackmove.started += instance.OnJetpackmove;
                @Jetpackmove.performed += instance.OnJetpackmove;
                @Jetpackmove.canceled += instance.OnJetpackmove;
                @JetPackRise.started += instance.OnJetPackRise;
                @JetPackRise.performed += instance.OnJetPackRise;
                @JetPackRise.canceled += instance.OnJetPackRise;
            }
        }
    }
    public JetpackMoveActions @JetpackMove => new JetpackMoveActions(this);

    // Climbmove
    private readonly InputActionMap m_Climbmove;
    private IClimbmoveActions m_ClimbmoveActionsCallbackInterface;
    private readonly InputAction m_Climbmove_MoveHandsAndArms;
    private readonly InputAction m_Climbmove_RightHand;
    private readonly InputAction m_Climbmove_LeftHand;
    private readonly InputAction m_Climbmove_RightFoot;
    private readonly InputAction m_Climbmove_LeftFoot;
    public struct ClimbmoveActions
    {
        private @PlayerMovementBigActionMap m_Wrapper;
        public ClimbmoveActions(@PlayerMovementBigActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveHandsAndArms => m_Wrapper.m_Climbmove_MoveHandsAndArms;
        public InputAction @RightHand => m_Wrapper.m_Climbmove_RightHand;
        public InputAction @LeftHand => m_Wrapper.m_Climbmove_LeftHand;
        public InputAction @RightFoot => m_Wrapper.m_Climbmove_RightFoot;
        public InputAction @LeftFoot => m_Wrapper.m_Climbmove_LeftFoot;
        public InputActionMap Get() { return m_Wrapper.m_Climbmove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ClimbmoveActions set) { return set.Get(); }
        public void SetCallbacks(IClimbmoveActions instance)
        {
            if (m_Wrapper.m_ClimbmoveActionsCallbackInterface != null)
            {
                @MoveHandsAndArms.started -= m_Wrapper.m_ClimbmoveActionsCallbackInterface.OnMoveHandsAndArms;
                @MoveHandsAndArms.performed -= m_Wrapper.m_ClimbmoveActionsCallbackInterface.OnMoveHandsAndArms;
                @MoveHandsAndArms.canceled -= m_Wrapper.m_ClimbmoveActionsCallbackInterface.OnMoveHandsAndArms;
                @RightHand.started -= m_Wrapper.m_ClimbmoveActionsCallbackInterface.OnRightHand;
                @RightHand.performed -= m_Wrapper.m_ClimbmoveActionsCallbackInterface.OnRightHand;
                @RightHand.canceled -= m_Wrapper.m_ClimbmoveActionsCallbackInterface.OnRightHand;
                @LeftHand.started -= m_Wrapper.m_ClimbmoveActionsCallbackInterface.OnLeftHand;
                @LeftHand.performed -= m_Wrapper.m_ClimbmoveActionsCallbackInterface.OnLeftHand;
                @LeftHand.canceled -= m_Wrapper.m_ClimbmoveActionsCallbackInterface.OnLeftHand;
                @RightFoot.started -= m_Wrapper.m_ClimbmoveActionsCallbackInterface.OnRightFoot;
                @RightFoot.performed -= m_Wrapper.m_ClimbmoveActionsCallbackInterface.OnRightFoot;
                @RightFoot.canceled -= m_Wrapper.m_ClimbmoveActionsCallbackInterface.OnRightFoot;
                @LeftFoot.started -= m_Wrapper.m_ClimbmoveActionsCallbackInterface.OnLeftFoot;
                @LeftFoot.performed -= m_Wrapper.m_ClimbmoveActionsCallbackInterface.OnLeftFoot;
                @LeftFoot.canceled -= m_Wrapper.m_ClimbmoveActionsCallbackInterface.OnLeftFoot;
            }
            m_Wrapper.m_ClimbmoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveHandsAndArms.started += instance.OnMoveHandsAndArms;
                @MoveHandsAndArms.performed += instance.OnMoveHandsAndArms;
                @MoveHandsAndArms.canceled += instance.OnMoveHandsAndArms;
                @RightHand.started += instance.OnRightHand;
                @RightHand.performed += instance.OnRightHand;
                @RightHand.canceled += instance.OnRightHand;
                @LeftHand.started += instance.OnLeftHand;
                @LeftHand.performed += instance.OnLeftHand;
                @LeftHand.canceled += instance.OnLeftHand;
                @RightFoot.started += instance.OnRightFoot;
                @RightFoot.performed += instance.OnRightFoot;
                @RightFoot.canceled += instance.OnRightFoot;
                @LeftFoot.started += instance.OnLeftFoot;
                @LeftFoot.performed += instance.OnLeftFoot;
                @LeftFoot.canceled += instance.OnLeftFoot;
            }
        }
    }
    public ClimbmoveActions @Climbmove => new ClimbmoveActions(this);

    // Interaction
    private readonly InputActionMap m_Interaction;
    private IInteractionActions m_InteractionActionsCallbackInterface;
    private readonly InputAction m_Interaction_Start;
    private readonly InputAction m_Interaction_Accept;
    private readonly InputAction m_Interaction_Interact;
    private readonly InputAction m_Interaction_SwitchVheicle;
    public struct InteractionActions
    {
        private @PlayerMovementBigActionMap m_Wrapper;
        public InteractionActions(@PlayerMovementBigActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Start => m_Wrapper.m_Interaction_Start;
        public InputAction @Accept => m_Wrapper.m_Interaction_Accept;
        public InputAction @Interact => m_Wrapper.m_Interaction_Interact;
        public InputAction @SwitchVheicle => m_Wrapper.m_Interaction_SwitchVheicle;
        public InputActionMap Get() { return m_Wrapper.m_Interaction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionActions set) { return set.Get(); }
        public void SetCallbacks(IInteractionActions instance)
        {
            if (m_Wrapper.m_InteractionActionsCallbackInterface != null)
            {
                @Start.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnStart;
                @Start.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnStart;
                @Start.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnStart;
                @Accept.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnAccept;
                @Accept.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnAccept;
                @Accept.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnAccept;
                @Interact.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnInteract;
                @SwitchVheicle.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnSwitchVheicle;
                @SwitchVheicle.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnSwitchVheicle;
                @SwitchVheicle.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnSwitchVheicle;
            }
            m_Wrapper.m_InteractionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Start.started += instance.OnStart;
                @Start.performed += instance.OnStart;
                @Start.canceled += instance.OnStart;
                @Accept.started += instance.OnAccept;
                @Accept.performed += instance.OnAccept;
                @Accept.canceled += instance.OnAccept;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @SwitchVheicle.started += instance.OnSwitchVheicle;
                @SwitchVheicle.performed += instance.OnSwitchVheicle;
                @SwitchVheicle.canceled += instance.OnSwitchVheicle;
            }
        }
    }
    public InteractionActions @Interaction => new InteractionActions(this);
    public interface IRegMoveActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
    }
    public interface IBikeMoveActions
    {
        void OnMoveBike(InputAction.CallbackContext context);
        void OnJumpBike(InputAction.CallbackContext context);
        void OnSpeedBike(InputAction.CallbackContext context);
        void OnBreak(InputAction.CallbackContext context);
    }
    public interface IJetpackMoveActions
    {
        void OnJetpackmove(InputAction.CallbackContext context);
        void OnJetPackRise(InputAction.CallbackContext context);
    }
    public interface IClimbmoveActions
    {
        void OnMoveHandsAndArms(InputAction.CallbackContext context);
        void OnRightHand(InputAction.CallbackContext context);
        void OnLeftHand(InputAction.CallbackContext context);
        void OnRightFoot(InputAction.CallbackContext context);
        void OnLeftFoot(InputAction.CallbackContext context);
    }
    public interface IInteractionActions
    {
        void OnStart(InputAction.CallbackContext context);
        void OnAccept(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnSwitchVheicle(InputAction.CallbackContext context);
    }
}
